---
layout: post
title:  array
date:   2024-04-25 01:00:00 +0000
categories: c
tags: c
---

Источник `https://proproprogs.ru/c_base/c_vvedenie-v-massivy`

```c
#include <stdio.h>
#define TOTAL_MARKS                13
 
int main(void)
{
         int marks[TOTAL_MARKS];
         return 0;
}
```

Обход массива с помощью цикла for

```c
#include <stdio.h>
 
#define TOTAL_MARKS                13
 
int main(void)
{
         int marks[TOTAL_MARKS];
         marks[2] = 4;
         marks[0] = 2;
         marks[12] = 5;
//       marks[13] = 1;               // никогда так не делайте!!!
 
         for(int i = 0; i < TOTAL_MARKS; ++i)
                   printf("%d ", marks[i]);
 
         return 0;
}
```

Размер массива ( количество элементов и байт )

```c
#include <stdio.h>

int main(void)
{
    printf( "%zu %zu\n", sizeof( marks ) / sizeof( *marks ), sizeof( marks ) );

    return 0;
}
```

# Тип size_t. Подсчёт количества элементов

```c
#include <stdio.h>

int main ( void ) {
	size_t bytes_marks = sizeof( marks );
	size_t len_marks = bytes_marks / sizeof( marks[ 0 ] );
	
	printf( "%zu zu", len_marks, bytes_marks );
	
	return 0;
}
```

# Указатель ( pointer )

Предположим, что у нас существует некий массив с именем ar

Для получения значения первого элемента, с индексом 0, мы можем использовать звёздочку

`*ar`

Для того, чтобы пройти по всем элементам, можно использовать `*(ar+i)`

У первого элемента переменная i будет равна нулю

```c
for( int i = 0; i < sizeof( ar ) / sizeof( *ar ); ++i )
  printf( "%d ", *( ar + i ) );
```

# copy

```c
#include <stdio.h>

// Функция для копирования массива source в массив destination
// sizeSource - размер исходного массива, sizeDestination - размер целевого массива
void copyArray(int source[], int destination[], int sizeSource, int sizeDestination) {
    // Определяем минимальный размер для копирования
    int minSize = (sizeSource < sizeDestination) ? sizeSource : sizeDestination;
    
    for (int i = 0; i < minSize; i++) {
        destination[i] = source[i];
    }
}

int main() {
    // Определим исходный массив
    int sourceArray[] = {1, 2, 3, 4, 5};
    // Определим массив, в который будем копировать
    int destinationArray[3]; // Пусть размер целевого массива будет меньше исходного

    // Вычисляем размеры массивов
    int sizeSource = sizeof(sourceArray) / sizeof(sourceArray[0]);
    int sizeDestination = sizeof(destinationArray) / sizeof(destinationArray[0]);

    // Копируем массив
    copyArray(sourceArray, destinationArray, sizeSource, sizeDestination);

    // Выводим исходный массив
    printf("Исходный массив: ");
    for (int i = 0; i < sizeSource; i++) {
        printf("%d ", sourceArray[i]);
    }

    // Выводим скопированный массив
    printf("\nСкопированный массив: ");
    for (int i = 0; i < sizeDestination; i++) {
        printf("%d ", destinationArray[i]);
    }

    return 0;
}
```

# insert

```c
#include <stdio.h>

#define TOTAL_MARKS 100

int main() {
int marks[TOTAL_MARKS];
int num_elements = 0; // текущее количество элементов в массиве
int value, position, i;

// Предположим, что массив уже содержит некоторые значения, и num_elements их количество
// Здесь должен быть код для инициализации массива marks и переменной num_elements

// Чтение значения и позиции для вставки
printf("Введите значение для вставки: ");
scanf("%d", &value);
printf("Введите позицию для вставки: ");
scanf("%d", &position);

// Проверка, достаточно ли места в массиве для вставки
if (num_elements >= TOTAL_MARKS) {
printf("В массиве нет места для вставки нового элемента.\n");
return -1;
}

// Проверка корректности введенной позиции
if (position < 0 || position > num_elements) {
printf("Некорректная позиция для вставки.\n");
return -1;
}

// Сдвиг элементов для освобождения места для нового элемента
for (i = num_elements; i > position; i--) {
marks[i] = marks[i - 1];
}

// Вставка элемента
marks[position] = value;
num_elements++; // Увеличиваем количество элементов после вставки

// Вывод массива после вставки
printf("Массив после вставки:\n");
for (i = 0; i < num_elements; i++) {
printf("%d ", marks[i]);
}
printf("\n");

return 0;
}
```